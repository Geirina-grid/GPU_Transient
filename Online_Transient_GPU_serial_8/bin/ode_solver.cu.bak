#include <cuda.h>
#include <cuda_runtime.h>
#include <iostream>
#include <fstream>
#include <cmath>
#include <utility>

#include <thrust/device_vector.h>
#include <thrust/reduce.h>
#include <thrust/functional.h>

#include <boost/numeric/odeint.hpp>
#include <boost/numeric/odeint/external/thrust/thrust.hpp>

#include <boost/timer.hpp>
#include <boost/random/cauchy_distribution.hpp>

using namespace std;

using namespace boost::numeric::odeint;
using namespace transient_analysis;
//namespace transient_analysis {

__device__
real__t apply_limiting(real__t val, const real__t val_min, const real__t val_max) {
   //cout << "In apply_limiting .x="  << endl;
  return (val < val_min) ? val_min : ((val > val_max) ? val_max : val);
}

__device__ real_t apply_dead_band(const real__t val, const real__t tol) {
   //cout << "In apply_dead_band .x="  << endl;
  return (abs(val) <= tol) ? 0 : val;
}

/**  integrate_block integrates one step of the following ODE:
 *    (a + bs) / (c + ds) x = y
*/
__device__ void
integrate_block(const vector_type& x, vector_type& dxdt, int idx_src, int idx_dst,
                real__t a, real__t b, real__t c, real__t d) {
   //cout << "In integrate_block 1.x="  << endl;
  dxdt[idx_dst] = (abs(d) < EPS) ? 0 : (a * x[idx_src] + b * dxdt[idx_src] - c * x[idx_dst]) / d;
}

/**  integrate_block integrates one step of the following ODE:
 *    a / (c + ds) x = y
*/
__device__ void
integrate_block(vector_type& dxdt, real__t val_src, real__t val_dst, int idx_dst,
                real__t a, real__t c, real__t d) {
   //cout << "In integrate_block 2.x="  << endl;
  dxdt[idx_dst] = (abs(d) < EPS) ? 0 : (a * val_src - c * val_dst) / d;
}

/**  integrate_block integrates one step of the following ODE:
 *    (a + bs) / (c + ds) x = y,
 * and directly takes the values of x and dx_dt as inputs.
*/

__device__ void
integrate_block(const vector_type& x, vector_type& dxdt, real__t val_src, real__t div_src,
                real__t val_dst, int idx_dst, real__t a, real__t b, real__t c, real__t d) {
  //cout << "In integrate_block 3.x="  << endl;
  dxdt[idx_dst] = (abs(d) < EPS) ? 0 : (a * val_src + b * div_src - c * val_dst) / d;
}

/**  process_PID_block does two things:
 * 1. calculate the output value
 * 2. process the ODE:    s y = Ki * x
*/
__device__ real__t
process_PID_block(const vector_type& x, vector_type& dxdt, real__t val_src, real__t div_src,
                  int idx_pid, PID_DATA &pid) {
  //cout << "In process_PID_block x="  << endl;
  real__t val1 = pid.Kp * val_src;
  real__t val2 = pid.Kd * div_src;
  dxdt[idx_pid] = pid.Ki * val_src;
  real__t val3 = apply_limiting(x[idx_pid], 10. * pid.I_Min, 10. * pid.I_Max);
  real__t val_total = val1 + val2 + val3;
  return apply_limiting(val_total, 10. * pid.PID_Min, 10. * pid.PID_Max);
}

/** a helper function for debugging */
__device__ void print_dxdt(const vector_type& dxdt) {
  //cout << "In print_dx_dt" << endl;
  TextTable t('-', '|', '+');

  t.addRow(vector<string>{"omega", "delta", "Eqp", "Edp", "Eqpp", "Edpp", "delta_mu"});

  t.add(to_string(dxdt[omega_idx]));
  t.add(to_string(dxdt[delta_idx]));
  t.add(to_string(dxdt[Eqp_idx]));
  t.add(to_string(dxdt[Edp_idx]));
  t.add(to_string(dxdt[Eqpp_idx]));
  t.add(to_string(dxdt[Edpp_idx]));
  t.add(to_string(dxdt[delta_mu_idx]));
  t.endOfRow();

  std::cout << t;
}

__device__ void update_generator_current(const vector_type& x, EPRI_GEN_DATA& gen) {
  //cout << "In update_generator_current  function..x=" << endl;
  if (parameters.GEN_type == 3 || parameters.GEN_type == 6) {
    real__t denom = gen.Ra * gen.Ra + gen.Xdpp * gen.Xqpp;
    assert(denom > EPS);
    Id = (+gen.Ra * (x[Edpp_idx] - Vd) + gen.Xqpp * (x[Eqpp_idx] - Vq)) / denom;
    Iq = (-gen.Xdpp * (x[Edpp_idx] - Vd) + gen.Ra * (x[Eqpp_idx] - Vq)) / denom;
  } else {
    real__t denom = gen.Ra * gen.Ra + gen.Xdp * gen.Xqp;
    assert(abs(denom) > EPS);
    Id = (+gen.Ra * (x[Edp_idx] - Vd) + gen.Xqp * (x[Eqp_idx] - Vq)) / denom;
    Iq = (-gen.Xdp * (x[Edp_idx] - Vd) + gen.Ra * (x[Eqp_idx] - Vq)) / denom;
  }
}

__device__ void setup(const vector_type& x, vector_type& dxdt, EPRI_GEN_DATA& gen) {
  //cout << "In setup function..x=" << endl;
  for (auto &v : x) {
    assert(!isnan(v));
  }
  
  omega_ref = parameters.omega_ref;
  Vm_ref    = parameters.Vt_ref;
  Pe_ref    = parameters.Pe_ref;
  Pm_ref    = parameters.Pe_ref;
  freq_ref  = parameters.freq_ref;
  Efd0      = parameters.Efd0;
  mu0       = parameters.mu0;
  
  Vm = sqrt(Vx * Vx + Vy * Vy);
  Va = atan2(Vy, Vx);
  Vd = Vm * sin(x[delta_idx] - Va);
  Vq = Vm * cos(x[delta_idx] - Va);
  
//  Ifd = x[Eqp_idx];
  Ifd     = gen.a * x[Eqp_idx] + gen.b * pow(x[Eqp_idx], gen.n);
  dIfd_dt = gen.a * dxdt[Eqp_idx] + gen.b * gen.n * pow(x[Eqp_idx], gen.n - 1) * dxdt[Eqp_idx];
  
  update_generator_current(x, gen);
  
  real__t Psi_q = -(gen.Ra * Id + Vd) / x[omega_idx];
  real__t Psi_d = +(gen.Ra * Iq + Vq) / x[omega_idx];

  Telec = Psi_d * Iq - Psi_q * Id;
  
#if DEBUG
  cout << "a = " << gen.a << ", b = " << gen.b << ", n = " << gen.n << ", x[Eqp_idx] = " << x[Eqp_idx] << endl;
  cout << "Ifd = " << Ifd << endl;
#endif
  
//  Telec = x[Eqp_idx] * Iq + x[Edp_idx] * Id - (gen.Xdpp - gen.Xqpp) * Id * Iq;
  
  for (auto& v: dxdt)  {v = 0;}
}

void
operator()(const vector_type& x, vector_type& dxdt, real__t t) {
  //cout << "In operator x=" << endl;
  setup(x, dxdt, parameters.gen);
  apply_perturbation(t, parameters.gen);
  update_generator_current(x, parameters.gen);
  
#if DEBUG
  printf("\n\nrunning ODE solver with Gen type %d, GOV type %d, AVR type %d, PSS type %d...\n",
         parameters.GEN_type, parameters.GOV_type, parameters.EXC_type, parameters.PSS_type);
#endif
  
  switch (parameters.PSS_type) {
    case 0: VS = 0; break;
    case 1: VS = process_EPRI_PSS_TYPE_I(x, dxdt, parameters.pss_1);    break;
    case 2: VS = process_EPRI_PSS_TYPE_II(x, dxdt, parameters.pss_2);   break;
    case 4: VS = process_EPRI_PSS_TYPE_IV(x, dxdt, parameters.pss_4_6); break;
    case 5: VS = process_EPRI_PSS_TYPE_V(x, dxdt, parameters.pss_5);    break;
    case 8: VS = process_EPRI_PSS_TYPE_VIII(x, dxdt, parameters.pss_8); break;
    default: {std::cerr << "Error: unsupported PSS type...\n"; std::terminate(); break;}
  }
  
  switch (parameters.EXC_type) {
    case 0:  Efd = Efd0; break;
    case 1:  Efd = process_EPRI_EXC_TYPE_I(x, dxdt, parameters.exc_1);       break;
    case 2:  Efd = process_EPRI_EXC_TYPE_II(x, dxdt, parameters.exc_2);      break;
    case 3:  Efd = process_EPRI_EXC_TYPE_III(x, dxdt, parameters.exc_3_10);  break;
    case 4:  Efd = process_EPRI_EXC_TYPE_IV(x, dxdt, parameters.exc_3_10);   break;
    case 5:  Efd = process_EPRI_EXC_TYPE_V(x, dxdt, parameters.exc_3_10);    break;
    case 6:  Efd = process_EPRI_EXC_TYPE_VI(x, dxdt, parameters.exc_3_10);   break;
    case 7:  Efd = process_EPRI_EXC_TYPE_VII(x, dxdt, parameters.exc_3_10);  break;
    case 8:  Efd = process_EPRI_EXC_TYPE_VIII(x, dxdt, parameters.exc_3_10); break;
    case 9:  Efd = process_EPRI_EXC_TYPE_IX(x, dxdt, parameters.exc_3_10);   break;
    case 10: Efd = process_EPRI_EXC_TYPE_X(x, dxdt, parameters.exc_3_10);    break;
    case 11: Efd = process_EPRI_EXC_TYPE_XI(x, dxdt, parameters.exc_11_12);  break;
    case 12: Efd = process_EPRI_EXC_TYPE_XII(x, dxdt, parameters.exc_11_12); break;
    default: {std::cerr << "Error: unsupported excitor (AVR) type...\n"; std::terminate(); break;}
  }
  
  switch (parameters.GOV_type) {
    case 0: Pmech = Pe_ref; break;
    case 1: Pmech = process_EPRI_GOV_TYPE_I(x, dxdt, parameters.gov_1);    break;
    case 3: Pmech = process_EPRI_GOV_TYPE_III(x, dxdt, parameters.gov_3);  break;
    case 4: Pmech = process_EPRI_GOV_TYPE_IV(x, dxdt, parameters.gov_4);   break;
    case 5: Pmech = process_EPRI_GOV_TYPE_V(x, dxdt, parameters.gov_5);    break;
//    case 6: Pmech = process_EPRI_GOV_TYPE_VI(x, dxdt, parameters.gov_6); break;
    case 7: Pmech = process_EPRI_GOV_TYPE_VII(x, dxdt, parameters.gov_7);  break;
    case 8: Pmech = process_EPRI_GOV_TYPE_VIII(x, dxdt, parameters.gov_8); break;
    case 9: Pmech = process_EPRI_GOV_TYPE_IX(x, dxdt, parameters.gov_9);   break;
    default: {std::cerr << "Error: unsupported governor (GOV) type...\n"; std::terminate(); break;}
  }
    
  switch (parameters.GEN_type) {
    case 0:
    case 1: process_EPRI_GEN_TYPE_I(x, dxdt, parameters.gen);   break;
    case 3: process_EPRI_GEN_TYPE_III(x, dxdt, parameters.gen); break;
    case 6: process_EPRI_GEN_TYPE_VI(x, dxdt, parameters.gen);  break;
    default: {std::cerr << "Error: unsupported generator (GEN) type...\n"; std::terminate(); break;}
  }

//  print_dxdt(dxdt);
}

//}  // namespace transient_analysis
